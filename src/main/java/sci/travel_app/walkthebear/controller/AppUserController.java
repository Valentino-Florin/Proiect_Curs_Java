package sci.travel_app.walkthebear.controller;


import org.apache.tomcat.jni.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import sci.travel_app.walkthebear.model.entities.AppUser;
import sci.travel_app.walkthebear.repository.AppUserRepository;

import javax.validation.Valid;

@Controller
public class AppUserController {


    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AppUserRepository userRepository;

//    @Autowired
//    private BCryptPasswordEncoder passwordEncoder;
//
//    @Autowired
//    private sci.travel_app.WalkTheBear.service.AppUserServiceImp appUserService;
//
//    @Autowired
//    private AppUserValidator appUserValidator;


//moved to HomePageController
//    @RequestMapping("/")
//    public String index() {
//        return "index";
//    }

    @RequestMapping("/login")
    public String login(Model model) {
        model.addAttribute("classActiveLogin", true);
        return "login";
    }


    @GetMapping("/registration")
    public String registration(Model model) {
        model.addAttribute("register", new User());

        return "registration";

    }
    @GetMapping("/adminuser")
    public String showAdminUser(@RequestParam(value = "userSearch", required = false) String userName, Model model) {
        model.addAttribute("userSearch", userRepository.findByUserName(userName));
        return "adminuser";
    }
    @GetMapping("/edituseradmin/{id}")
    public String showUpdateUserForm(@PathVariable("id") long id, Model model) {
        AppUser user = userRepository.findById(id);
        // .orElseThrow(() -> new IllegalArgumentException("Invalid user Id:" + id));

        model.addAttribute("user", user);
        return "edituseradmin";
    }
    @PostMapping("/edituseradmin/{id}")
    public String changeUser(@PathVariable("id") long id, @Valid AppUser user,
                             BindingResult result, Model model) {
        if (result.hasErrors()) {
            user.setId(id);
            return "edituseradmin";
        }

        userRepository.save(user);
        model.addAttribute("user",  userRepository.findAll());
        return "adminuser";
    }
}